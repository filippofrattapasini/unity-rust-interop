// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using RustNative;
#pragma warning restore 0105

namespace RustNative
{
    public static partial class Counter
    {
        public const string NativeLib = "Counter";

        static Counter()
        {
        }


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCounter")]
        public static extern IntPtr createCounter(Args args);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "getCounterData")]
        public static extern CounterData getCounterData(IntPtr ptr);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "getCounterValue")]
        public static extern uint getCounterValue(IntPtr ptr);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "incrementCounter")]
        public static extern uint incrementCounter(IntPtr ptr);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "decrementCounter")]
        public static extern uint decrementCounter(IntPtr ptr);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "incrementCounterBy")]
        public static extern uint incrementCounterBy(IntPtr ptr, uint by);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "decrementCounterBy")]
        public static extern uint decrementCounterBy(IntPtr ptr, uint by);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "incrementCounterByMany")]
        public static extern uint incrementCounterByMany(IntPtr ptr, ref uint bys_ptr, uint bys_len);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "decrementCounterByMany")]
        public static extern uint decrementCounterByMany(IntPtr ptr, ref uint bys_ptr, uint bys_len);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "destroyCounter")]
        public static extern void destroyCounter(IntPtr ptr);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "getCounterPositions")]
        public static extern IntPtr getCounterPositions(IntPtr counter, out uint out_len);

    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Args
    {
        uint init;
        uint by;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CounterData
    {
        public uint val;
        public uint by;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vector2
    {
        public float x;
        public float y;
    }



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
